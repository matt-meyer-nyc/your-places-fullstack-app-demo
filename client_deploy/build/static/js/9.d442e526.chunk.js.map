{"version":3,"sources":["places/pages/NewPlace.js"],"names":["NewPlace","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useForm","title","value","isValid","description","address","image","formState","inputHandler","history","useHistory","placeSubmitHandler","event","a","preventDefault","formData","FormData","append","inputs","process","Authorization","token","push","console","log","Error","Fragment","onClear","className","onSubmit","asOverlay","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","VALIDATOR_MINLENGTH","disabled"],"mappings":"sPA6HeA,UA3GE,WAEf,IAAMC,EAAOC,qBAAWC,KAFH,EAGiCC,cAA9CC,EAHa,EAGbA,UAAWC,EAHE,EAGFA,MAAOC,EAHL,EAGKA,YAAaC,EAHlB,EAGkBA,WAHlB,EAIaC,YAChC,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,YAAa,CACXF,MAAO,GACPC,SAAS,GAEXE,QAAS,CACPH,MAAO,GACPC,SAAS,GAEXG,MAAO,CACLJ,MAAO,KACPC,SAAS,KAGb,GAvBmB,mBAIdI,EAJc,KAIHC,EAJG,KA0BfC,EAAUC,cAEVC,EAAkB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACzBD,EAAME,iBADmB,UAIjBC,EAAW,IAAIC,UACZC,OAAO,QAASV,EAAUW,OAAOjB,MAAMC,OAChDa,EAASE,OAAO,cAAeV,EAAUW,OAAOd,YAAYF,OAC5Da,EAASE,OAAO,UAAWV,EAAUW,OAAOb,QAAQH,OAEpDa,EAASE,OAAO,QAASV,EAAUW,OAAOZ,MAAMJ,OATzB,SAWjBJ,EACJqB,oDACA,OACAJ,EAQA,CAAEK,cAAe,UAAY5B,EAAK6B,QAtBb,OAyBvBZ,EAAQa,KAAK,KAzBU,wDA2BvBC,QAAQC,IAAR,MACM,IAAIC,MAAJ,MA5BiB,0DAAH,sDAiCxB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,CAAY7B,MAAOA,EAAO8B,QAAS5B,IACnC,0BAAM6B,UAAU,aAAaC,SAAUlB,GACpCf,GAAa,kBAAC,IAAD,CAAgBkC,WAAS,IACvC,kBAAC,IAAD,CACEC,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,QACNC,WAAY,CAACC,eAEbC,UAAU,6BACVC,QAAS9B,IAEX,kBAAC,IAAD,CACEuB,GAAG,cACHC,QAAQ,WACRE,MAAM,cACNC,WAAY,CAACI,YAAoB,IAEjCF,UAAU,yDACVC,QAAS9B,IAEX,kBAAC,IAAD,CACEuB,GAAG,UACHC,QAAQ,QACRE,MAAM,UACNC,WAAY,CAACC,eAEbC,UAAU,+BACVC,QAAS9B,IAEX,kBAAC,IAAD,CACEuB,GAAG,QACHO,QAAS9B,EACT6B,UAAU,6BAEZ,kBAAC,IAAD,CAAQJ,KAAK,SAASO,UAAWjC,EAAUJ,SAA3C","file":"static/js/9.d442e526.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\nimport {\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\n\nimport './PlaceForm.css';\n\nconst NewPlace = () => {\n  // set up listener to context\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [formState, inputHandler] = useForm(\n    {\n      title: {\n        value: '',\n        isValid: false,\n      },\n      description: {\n        value: '',\n        isValid: false,\n      },\n      address: {\n        value: '',\n        isValid: false,\n      },\n      image: {\n        value: null,\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const history = useHistory();\n\n  const placeSubmitHandler = async (event) => {\n    event.preventDefault();\n\n    try {\n      const formData = new FormData();\n      formData.append('title', formState.inputs.title.value);\n      formData.append('description', formState.inputs.description.value);\n      formData.append('address', formState.inputs.address.value);\n      // formData.append('creator', auth.userId); // updated in backend to pull id from token instead so can't be faked\n      formData.append('image', formState.inputs.image.value);\n\n      await sendRequest(\n        process.env.REACT_APP_BACKEND_URL + '/places',\n        'POST',\n        formData, // ---> see Auth.js for details about why formData replaces JSON.stringify and headers\n        // JSON.stringify({\n        //   title: formState.inputs.title.value,\n        //   description: formState.inputs.description.value,\n        //   address: formState.inputs.address.value,\n        //   creator: auth.userId,\n        // }),\n        // { 'Content-type': 'application/json' }\n        { Authorization: 'Bearer ' + auth.token }\n      );\n\n      history.push('/');\n    } catch (err) {\n      console.log(err);\n      throw new Error(err);\n      // handled by hook\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <form className=\"place-form\" onSubmit={placeSubmitHandler}>\n        {isLoading && <LoadingSpinner asOverlay />}\n        <Input\n          id=\"title\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Title\"\n          validators={[VALIDATOR_REQUIRE()]}\n          // placeholder={placeholder}\n          errorText=\"Please enter a valid title\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(5)]}\n          // placeholder={placeholder}\n          errorText=\"Please enter a valid description at least 5 characters\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"address\"\n          element=\"input\"\n          label=\"Address\"\n          validators={[VALIDATOR_REQUIRE()]}\n          // placeholder={placeholder}\n          errorText=\"Please enter a valid address\"\n          onInput={inputHandler}\n        />\n        <ImageUpload\n          id=\"image\"\n          onInput={inputHandler}\n          errorText=\"Please provide an image.\"\n        />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          ADD PLACE\n        </Button>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default NewPlace;\n"],"sourceRoot":""}