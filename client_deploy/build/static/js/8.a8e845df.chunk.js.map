{"version":3,"sources":["user/pages/Auth.js"],"names":["Auth","auth","useContext","AuthContext","useState","isLoginMode","setLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","useForm","email","value","isValid","password","formState","inputHandler","setFormData","authSubmitHandler","event","a","preventDefault","process","JSON","stringify","inputs","responseData","login","userId","token","console","log","formData","FormData","append","name","image","Fragment","onClear","className","asOverlay","onSubmit","element","id","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","center","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","disabled","inverse","onClick","undefined","prevMode"],"mappings":"0RA4LeA,UAxKF,WACX,IAAMC,EAAOC,qBAAWC,KADP,EAEmBC,oBAAS,GAF5B,mBAEVC,EAFU,KAEGC,EAFH,OAGqCC,cAA9CC,EAHS,EAGTA,UAAWC,EAHF,EAGEA,MAAOC,EAHT,EAGSA,YAAaC,EAHtB,EAGsBA,WAHtB,EAK8BC,YAC7C,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,SAAU,CACRF,MAAO,GACPC,SAAS,KAGb,GAhBe,mBAKVE,EALU,KAKCC,EALD,KAKeC,EALf,KAiDXC,EAAiB,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,yDACxBD,EAAME,kBAEFlB,EAHoB,0CAKOK,EACzBc,yDACA,OACAC,KAAKC,UAAU,CACbb,MAAOI,EAAUU,OAAOd,MAAMC,MAC9BE,SAAUC,EAAUU,OAAOX,SAASF,QAEtC,CACE,eAAgB,qBAbA,OAKdc,EALc,OAiBpB3B,EAAK4B,MAAMD,EAAaE,OAAQF,EAAaG,OAjBzB,gDAmBpBC,QAAQC,IAAR,MAnBoB,kDAyBdC,EAAW,IAAIC,UAGZC,OAAO,QAASnB,EAAUU,OAAOd,MAAMC,OAEhDoB,EAASE,OAAO,OAAQnB,EAAUU,OAAOU,KAAKvB,OAC9CoB,EAASE,OAAO,WAAYnB,EAAUU,OAAOX,SAASF,OAGtDoB,EAASE,OAAO,QAASnB,EAAUU,OAAOW,MAAMxB,OAlC5B,UAoCOJ,EACzBc,0DACA,OACAU,GAvCkB,QAoCdN,EApCc,OAsDpB3B,EAAK4B,MAAMD,EAAaE,OAAQF,EAAaG,OAtDzB,oHAAH,sDA6DvB,OACE,kBAAC,IAAMQ,SAAP,KAEE,kBAAC,IAAD,CAAY9B,MAAOA,EAAO+B,QAAS7B,IACnC,kBAAC,IAAD,CAAM8B,UAAU,kBACbjC,GAAa,kBAAC,IAAD,CAAgBkC,WAAS,IACvC,wBAAID,UAAU,0BAAd,kBACA,6BACA,0BAAMA,UAAU,aAAaE,SAAUvB,IACnCf,GACA,kBAAC,IAAD,CACEuC,QAAQ,QACRC,GAAG,OACHC,KAAK,OACLC,MAAM,YACNC,WAAY,CAACC,eACbC,UAAU,0BACVC,QAASjC,KAGXb,GACA,kBAAC,IAAD,CACE+C,QAAM,EACNP,GAAG,QACHM,QAASjC,EACTgC,UAAU,6BAGd,kBAAC,IAAD,CACEL,GAAG,QACHD,QAAQ,QACRE,KAAK,QACLC,MAAM,QACNC,WAAY,CAACK,eACbH,UAAU,qCACVC,QAASjC,IAEX,kBAAC,IAAD,CACE2B,GAAG,WACHD,QAAQ,QACRE,KAAK,WACLC,MAAM,WACNC,WAAY,CAACM,YAAoB,IACjCJ,UAAU,2DACVC,QAASjC,IAEX,kBAAC,IAAD,CAAQ4B,KAAK,SAASS,UAAWtC,EAAUF,SACxCV,EAAc,QAAU,WAG7B,kBAAC,IAAD,CAAQmD,SAAO,EAACC,QA7II,WACnBpD,EAUHc,EAAY,2BAELF,EAAUU,QAFN,IAGPU,KAAM,CACJvB,MAAO,GACPC,SAAS,GAEXuB,MAAO,CACLxB,MAAO,KACPC,SAAS,MAGb,GArBFI,EAAY,2BAELF,EAAUU,QAFN,IAGPU,UAAMqB,EACNpB,WAAOoB,IAETzC,EAAUU,OAAOd,MAAME,SAAWE,EAAUU,OAAOX,SAASD,SAmBhET,GAAa,SAACqD,GAAD,OAAeA,OAkHxB,aACatD,EAAc,SAAW","file":"static/js/8.a8e845df.chunk.js","sourcesContent":["import React, { useState, useContext } from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\n\nimport './Auth.css';\nimport '../../places/pages/PlaceForm.css';\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setLoginMode] = useState(true);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: '',\n        isValid: false,\n      },\n      password: {\n        value: '',\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: undefined,\n          image: undefined,\n        },\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: '',\n            isValid: false,\n          },\n          image: {\n            value: null,\n            isValid: false,\n          },\n        },\n        false\n      );\n    }\n    // invert (i.e. if was prevMode not prevMode and vice versa)\n    setLoginMode((prevMode) => !prevMode);\n  };\n\n  const authSubmitHandler = async (event) => {\n    event.preventDefault();\n\n    if (isLoginMode) {\n      try {\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + '/users/login',\n          'POST',\n          JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value,\n          }),\n          {\n            'Content-Type': 'application/json',\n          }\n        );\n\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {\n        console.log(err);\n        // alternatively, this could be written with .then() an ommit this catch piece\n      }\n    } else {\n      try {\n        // FormData built into browswer as usable; allows for binary data to be passed\n        const formData = new FormData();\n\n        //                  v   first arg identifier\n        formData.append('email', formState.inputs.email.value);\n        //                           ^ 2nd arg, value\n        formData.append('name', formState.inputs.name.value);\n        formData.append('password', formState.inputs.password.value);\n\n        //                  V   notes this directly correlates to 'image' key set up in backend 'user-routes.js' w/ file.upload.single('image')\n        formData.append('image', formState.inputs.image.value);\n\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + '/users/signup',\n          'POST',\n          formData // ---> replaces JSON.stringify --- note: fetch() call (used with sendRequest),\n          // underneath the hood, in conjunction with using formData automatically adds the right headers, so doesn't need to be set manually )\n\n          // JSON.stringify({\n          //   name: formState.inputs.name.value,\n          //   email: formState.inputs.email.value,\n          //   password: formState.inputs.password.value,\n          //   creator: auth.userId,\n          // }),\n\n          // {\n          //   'Content-Type': 'application/json',\n          // }\n        );\n\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {\n        // logic handled by hook\n      }\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {/*                  v    error state (from useState) */}\n      <ErrorModal error={error} onClear={clearError} />\n      <Card className=\"authentication\">\n        {isLoading && <LoadingSpinner asOverlay />}\n        <h2 className=\"authentication__header\">Login Required</h2>\n        <hr />\n        <form className=\"place-form\" onSubmit={authSubmitHandler}>\n          {!isLoginMode && (\n            <Input\n              element=\"input\"\n              id=\"name\"\n              type=\"text\"\n              label=\"Your Name\"\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText=\"Please eneter your name\"\n              onInput={inputHandler}\n            />\n          )}\n          {!isLoginMode && (\n            <ImageUpload\n              center\n              id=\"image\"\n              onInput={inputHandler}\n              errorText=\"Please provide an image.\"\n            />\n          )}\n          <Input\n            id=\"email\"\n            element=\"input\"\n            type=\"email\"\n            label=\"Email\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid email address\"\n            onInput={inputHandler}\n          />\n          <Input\n            id=\"password\"\n            element=\"input\"\n            type=\"password\"\n            label=\"Password\"\n            validators={[VALIDATOR_MINLENGTH(6)]}\n            errorText=\"Please enter a valid password at least 8 characters long\"\n            onInput={inputHandler}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            {isLoginMode ? 'LOGIN' : 'SIGNUP'}\n          </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>\n          SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\n        </Button>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default Auth;\n"],"sourceRoot":""}